---
import Icon from './Icon.astro';
---

<theme-toggle>
  <button>
    <span class="sr-only">Dark theme</span>
    <span class="icon light"><Icon icon="sun" /></span>
    <span class="icon dark"><Icon icon="moon-stars" /></span>
  </button>
</theme-toggle>

<style>
    button {
        display: flex;
        border: 0;
        border-radius: 999rem;
        padding: 0;
        background-color: var(--gray-999);
        box-shadow: inset 0 0 0 1px var(--accent-overlay);
        cursor: pointer;
    }

    .icon {
        z-index: 1;
        position: relative;
        display: flex;
        padding: 0.5rem;
        width: 2rem;
        height: 2rem;
        font-size: 1rem;
        color: var(--accent-overlay);
    }

    .icon.light::before {
        content: '';
        z-index: -1;
        position: absolute;
        inset: 0;
        background-color: var(--accent-regular);
        border-radius: 999rem;
    }

    :global(.dark) .icon.light::before {
        transform: translateX(100%);
    }

    :global(.dark) .icon.dark,
    :global(html:not(.dark)) .icon.light,
    button[aria-pressed='false'] .icon.light {
        color: var(--accent-text-over);
    }

    @media (prefers-reduced-motion: no-preference) {
        .icon,
        .icon.light::before {
            transition:
                transform var(--theme-transition),
                color var(--theme-transition);
        }
    }
</style>

<script>
    class ThemeToggle extends HTMLElement {
      constructor () {
        super()
        this.setupTheme()
      }

      setupTheme () {
        const button = this.querySelector('button')
        if (!button) return

        /** Set the theme to dark/light mode. */
        const setTheme = (dark: boolean) => {
          document.documentElement.classList.toggle('dark', dark)
          button.setAttribute('aria-pressed', String(dark))
          localStorage.setItem('theme', dark ? 'dark' : 'light')
        }

        // Toggle the theme when a user clicks the button.
        button.addEventListener('click', () => {
          setTheme(!this.isDark())
        })

        // Initialize button state to reflect current theme.
        setTheme(this.isDark())
      }

      isDark () {
        const stored = localStorage.getItem('theme')
        if (stored) {
          return stored === 'dark'
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches
      }
    }

    customElements.define('theme-toggle', ThemeToggle)

    // Reaplicar tema despuÃ©s de navegaciones
    document.addEventListener('astro:after-swap', () => {
      const toggle = document.querySelector('theme-toggle') as ThemeToggle
      if (toggle) {
        const button = toggle.querySelector('button')
        const isDark = toggle.isDark()
        document.documentElement.classList.toggle('dark', isDark)
        button?.setAttribute('aria-pressed', String(isDark))
      }
    })
</script>
